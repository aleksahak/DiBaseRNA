import cPickle, base64
try:
	from SimpleSession.versions.v45 import beginRestore,\
	    registerAfterModelsCB, reportRestoreError, checkVersion
except ImportError:
	from chimera import UserError
	raise UserError('Cannot open session that was saved in a'
	    ' newer version of Chimera; update your version')
checkVersion([1, 4, 29530])
import chimera
from chimera import replyobj
replyobj.status('Beginning session restore...', \
    blankAfter=0)
beginRestore()

def restoreCoreModels():
	from SimpleSession.versions.v45 import init, restoreViewer, \
	     restoreMolecules, restoreColors, restoreSurfaces, \
	     restoreVRML, restorePseudoBondGroups, restoreModelAssociations
	molInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVRFyaWJib25JbnNpZGVDb2xvcnECSw1OfYdxA1UJYmFsbFNjYWxlcQRLDUc/0AAAAAAAAH2HcQVVFHJpYmJvbkhpZGVzTWFpbmNoYWlucQZLDYh9h3EHVQlwb2ludFNpemVxCEsNRz/wAAAAAAAAfYdxCVUEbmFtZXEKSw1VEENVX2RpYWdvbl83MS5wZGJ9cQsoVRFDVV9kaWFnb25fMTYzLnBkYnEMXXENSwNhVRBDVV9kaWFnb25fMTkucGRicQ5dcQ9LBGFVEENVX2RpYWdvbl83Mi5wZGJxEF1xEUsKYVUQQ1VfZGlhZ29uXzc0LnBkYnESXXETSwxhVRBDVV9kaWFnb25fNDYucGRicRRdcRVLCGFVEUNVX2RpYWdvbl8xMTIucGRicRZdcRdLAGFVEENVX2RpYWdvbl8zNy5wZGJxGF1xGUsGYVURQ1VfZGlhZ29uXzExMy5wZGJxGl1xG0sBYVUQQ1VfZGlhZ29uXzI5LnBkYnEcXXEdSwVhVRFDVV9kaWFnb25fMTM0LnBkYnEeXXEfSwJhVRBDVV9kaWFnb25fNzMucGRicSBdcSFLC2FVEENVX2RpYWdvbl80NS5wZGJxIl1xI0sHYXWHcSRVD2Fyb21hdGljRGlzcGxheXElSw2JfYdxJlUFY29sb3JxJ0sNSwB9cSgoSwFdcSlLAWFLAl1xKksCYUsDXXErSwNhSwRdcSxLBGFLBV1xLUsFYUsGXXEuSwZhSwddcS9LB2FLCF1xMEsIYUsJXXExSwlhSwpdcTJLCmFLC11xM0sLYUsMXXE0SwxhdYdxNVUIb3B0aW9uYWxxNn1xN1UIb3BlbmVkQXNxOIhLDShVOi9ob21lL2FsZXgvRGVza3RvcC9kaUJhc2VfbGliRi9DVS9zcGF0aWFsL0NVX2RpYWdvbl80Ni5wZGJVA1BEQnE5Tol0cTp9cTsoKFU7L2hvbWUvYWxleC9EZXNrdG9wL2RpQmFzZV9saWJGL0NVL3NwYXRpYWwvQ1VfZGlhZ29uXzExMy5wZGJoOU6JdHE8XXE9SwFhKFU6L2hvbWUvYWxleC9EZXNrdG9wL2RpQmFzZV9saWJGL0NVL3NwYXRpYWwvQ1VfZGlhZ29uXzcyLnBkYmg5Tol0cT5dcT9LCmEoVTovaG9tZS9hbGV4L0Rlc2t0b3AvZGlCYXNlX2xpYkYvQ1Uvc3BhdGlhbC9DVV9kaWFnb25fNzMucGRiaDlOiXRxQF1xQUsLYShVOi9ob21lL2FsZXgvRGVza3RvcC9kaUJhc2VfbGliRi9DVS9zcGF0aWFsL0NVX2RpYWdvbl80NS5wZGJoOU6JdHFCXXFDSwdhKFU6L2hvbWUvYWxleC9EZXNrdG9wL2RpQmFzZV9saWJGL0NVL3NwYXRpYWwvQ1VfZGlhZ29uXzcxLnBkYmg5Tol0cURdcUVLCWEoVTovaG9tZS9hbGV4L0Rlc2t0b3AvZGlCYXNlX2xpYkYvQ1Uvc3BhdGlhbC9DVV9kaWFnb25fNzQucGRiaDlOiXRxRl1xR0sMYShVOi9ob21lL2FsZXgvRGVza3RvcC9kaUJhc2VfbGliRi9DVS9zcGF0aWFsL0NVX2RpYWdvbl8yOS5wZGJoOU6JdHFIXXFJSwVhKFU6L2hvbWUvYWxleC9EZXNrdG9wL2RpQmFzZV9saWJGL0NVL3NwYXRpYWwvQ1VfZGlhZ29uXzM3LnBkYmg5Tol0cUpdcUtLBmEoVTovaG9tZS9hbGV4L0Rlc2t0b3AvZGlCYXNlX2xpYkYvQ1Uvc3BhdGlhbC9DVV9kaWFnb25fMTkucGRiaDlOiXRxTF1xTUsEYShVOy9ob21lL2FsZXgvRGVza3RvcC9kaUJhc2VfbGliRi9DVS9zcGF0aWFsL0NVX2RpYWdvbl8xNjMucGRiaDlOiXRxTl1xT0sDYShVOy9ob21lL2FsZXgvRGVza3RvcC9kaUJhc2VfbGliRi9DVS9zcGF0aWFsL0NVX2RpYWdvbl8xMTIucGRiaDlOiXRxUF1xUUsAYShVOy9ob21lL2FsZXgvRGVza3RvcC9kaUJhc2VfbGliRi9DVS9zcGF0aWFsL0NVX2RpYWdvbl8xMzQucGRiaDlOiXRxUl1xU0sCYXWHhnFUc1UKcGRiSGVhZGVyc3FVXXFWKH1xV31xWH1xWX1xWn1xW31xXH1xXX1xXn1xX31xYH1xYX1xYn1xY2VVDGFyb21hdGljTW9kZXFkSw1LAX2HcWVVA2lkc3FmSw1LCUsAhn1xZyhLAEsAhnFoXXFpSwBhSwdLAIZxal1xa0sHYUsMSwCGcWxdcW1LDGFLA0sAhnFuXXFvSwNhSwhLAIZxcF1xcUsIYUsGSwCGcXJdcXNLBmFLC0sAhnF0XXF1SwthSwJLAIZxdl1xd0sCYUsFSwCGcXhdcXlLBWFLCksAhnF6XXF7SwphSwFLAIZxfF1xfUsBYUsESwCGcX5dcX9LBGF1h3GAVQ5zdXJmYWNlT3BhY2l0eXGBSw1Hv/AAAAAAAAB9h3GCVQlhdXRvY2hhaW5xg0sNiH2HcYRVCnZkd0RlbnNpdHlxhUsNR0AUAAAAAAAAfYdxhlUNYXJvbWF0aWNDb2xvcnGHSw1OfYdxiFUGaGlkZGVucYlLDYl9h3GKVQlsaW5lV2lkdGhxi0sNRz/wAAAAAAAAfYdxjFUKc3RpY2tTY2FsZXGNSw1HP/AAAAAAAAB9h3GOVQdkaXNwbGF5cY9LDYh9h3GQVRBhcm9tYXRpY0xpbmVUeXBlcZFLDUsCfYdxknUu'))
	resInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVQZpbnNlcnRxAksaVQEgfYdxA1ULZmlsbERpc3BsYXlxBEsaiX2HcQVVBG5hbWVxBksaVQFDfXEHVQFVXXEIKEsBSwNLBUsHSwlLC0sNSw9LEUsTSxVLF0sZZXOHcQlVBWNoYWlucQpLGlUBQX1xC1UBQk5dcQwoSwFLAYZxDUsDSwGGcQ5LBUsBhnEPSwdLAYZxEEsJSwGGcRFLC0sBhnESSw1LAYZxE0sPSwGGcRRLEUsBhnEVSxNLAYZxFksVSwGGcRdLF0sBhnEYSxlLAYZxGWWGcRpzh3EbVQ5yaWJib25EcmF3TW9kZXEcSxpLAn2HcR1VAnNzcR5LGomJiYd9h3EfVQhtb2xlY3VsZXEgSxpLAH1xIShLAU5dcSJLAksChnEjYYZxJEsCTl1xJUsESwKGcSZhhnEnSwNOXXEoSwZLAoZxKWGGcSpLBE5dcStLCEsChnEsYYZxLUsFTl1xLksKSwKGcS9hhnEwSwZOXXExSwxLAoZxMmGGcTNLB05dcTRLDksChnE1YYZxNksITl1xN0sQSwKGcThhhnE5SwlOXXE6SxJLAoZxO2GGcTxLCk5dcT1LFEsChnE+YYZxP0sLTl1xQEsWSwKGcUFhhnFCSwxOXXFDSxhLAoZxRGGGcUV1h3FGVQtyaWJib25Db2xvcnFHSxpOfYdxSFUFbGFiZWxxSUsaVQB9h3FKVQpsYWJlbENvbG9ycUtLGk59h3FMVQhmaWxsTW9kZXFNSxpLAX2HcU5VBWlzSGV0cU9LGol9h3FQVQtsYWJlbE9mZnNldHFRSxpOfYdxUlUIcG9zaXRpb25xU11xVChLAUsChnFVSwFLAoZxVksBSwKGcVdLAUsChnFYSwFLAoZxWUsBSwKGcVpLAUsChnFbSwFLAoZxXEsBSwKGcV1LAUsChnFeSwFLAoZxX0sBSwKGcWBLAUsChnFhZVUNcmliYm9uRGlzcGxheXFiSxqJfYdxY1UIb3B0aW9uYWxxZH1xZVUEc3NJZHFmSxpK/////32HcWd1Lg=='))
	atomInfo = cPickle.loads(base64.b64decode('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'))
	bondInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVQVhdG9tc3ECXXEDKF1xBChLKEsnZV1xBShLKEspZV1xBihLKEsqZV1xByhLK0sqZV1xCChLK0ssZV1xCShLLUssZV1xCihLLkssZV1xCyhLK0svZV1xDChLL0swZV1xDShLMEsxZV1xDihLMEsnZV1xDyhLL0syZV1xEChLM0snZV1xEShLNUs0ZV1xEihLNUs2ZV1xEyhLN0s2ZV1xFChLN0s4ZV1xFShLN0s5ZV1xFihLOUs6ZV1xFyhLOUs7ZV1xGChLO0s0ZV1xGShLO0s8ZV1xGihLPUs2ZV1xGyhLNUs+ZV1xHChLP0s0ZV1xHShLQUtAZV1xHihLQktBZV1xHyhLQktDZV1xIChLREtCZV1xIShLREtFZV1xIihLRktFZV1xIyhLRktHZV1xJChLRktAZV1xJShLREtIZV1xJihLSUtIZV1xJyhLSktIZV1xKChLQUtLZV1xKShLTEtAZV1xKihLTktNZV1xKyhLTktPZV1xLChLUEtPZV1xLShLUEtRZV1xLihLUUtSZV1xLyhLUktTZV1xMChLUktNZV1xMShLUUtUZV1xMihLUEtVZV1xMyhLVktPZV1xNChLTktXZV1xNShLWEtNZV1xNihLWktZZV1xNyhLWktbZV1xOChLWktcZV1xOShLXUtcZV1xOihLXUteZV1xOyhLX0teZV1xPChLYEteZV1xPShLXUthZV1xPihLYUtiZV1xPyhLYUtjZV1xQChLY0tkZV1xQShLY0tZZV1xQihLZUtZZV1xQyhLZ0tmZV1xRChLZ0toZV1xRShLaUtnZV1xRihLaktpZV1xRyhLaktrZV1xSChLbEtrZV1xSShLbEttZV1xSihLbEtmZV1xSyhLbktrZV1xTChLaktvZV1xTShLaUtwZV1xTihLcUtmZV1xTyhLc0tyZV1xUChLdEtzZV1xUShLdEt1ZV1xUihLdkt0ZV1xUyhLdkt3ZV1xVChLeEt3ZV1xVShLeUt3ZV1xVihLdkt6ZV1xVyhLe0t6ZV1xWChLe0tyZV1xWShLe0t8ZV1xWihLc0t9ZV1xWyhLfktyZV1xXChLgEt/ZV1xXShLgEuBZV1xXihLgkuBZV1xXyhLgkuDZV1xYChLg0uEZV1xYShLg0uFZV1xYihLhUuGZV1xYyhLhUt/ZV1xZChLgkuHZV1xZShLiEuBZV1xZihLgEuJZV1xZyhLikt/ZV1xaChLjEuLZV1xaShLjEuNZV1xaihLjEuOZV1xayhLj0uOZV1xbChLj0uQZV1xbShLkEuRZV1xbihLkUuSZV1xbyhLkUuLZV1xcChLkEuTZV1xcShLj0uUZV1xcihLlUuUZV1xcyhLlkuUZV1xdChLl0uLZV1xdShLmUuYZV1xdihLmkuZZV1xdyhLm0uaZV1xeChLm0ucZV1xeShLm0udZV1xeihLnkudZV1xeyhLn0udZV1xfChLn0ugZV1xfShLn0uYZV1xfihLmkuhZV1xfyhLmUuiZV1xgChLo0uYZV1xgShLpUukZV1xgihLpkulZV1xgyhLpkunZV1xhChLqEumZV1xhShLqEupZV1xhihLqkupZV1xhyhLqkukZV1xiChLqkurZV1xiShLqEusZV1xiihLrUusZV1xiyhLrkusZV1xjChLpUuvZV1xjShLsEukZV1xjihLskuxZV1xjyhLskuzZV1xkChLtEuyZV1xkShLtEu1ZV1xkihLtku0ZV1xkyhLtku3ZV1xlChLuEu3ZV1xlShLuUu3ZV1xlihLuUuxZV1xlyhLuUu6ZV1xmChLtku7ZV1xmShLvEuxZV1xmihLvku9ZV1xmyhLv0u9ZV1xnChLv0vAZV1xnShLv0vBZV1xnihLwkvBZV1xnyhLwkvDZV1xoChLxEvDZV1xoShLxUvDZV1xoihLwkvGZV1xoyhLxkvHZV1xpChLx0u9ZV1xpShLx0vIZV1xpihLxkvJZV1xpyhLy0vKZV1xqChLy0vMZV1xqShLzUvLZV1xqihLzkvNZV1xqyhLzkvPZV1xrChL0EvPZV1xrShL0UvPZV1xrihL0UvKZV1xryhL0UvSZV1xsChLzkvTZV1xsShLzUvUZV1xsihL1UvKZV1xsyhL10vWZV1xtChL10vYZV1xtShL10vZZV1xtihL2kvZZV1xtyhL2kvbZV1xuChL20vcZV1xuShL20vdZV1xuihL3UveZV1xuyhL3UvWZV1xvChL2kvfZV1xvShL4EvfZV1xvihL4UvfZV1xvyhL4kvWZV1xwChL5EvjZV1xwShL5EvlZV1xwihL5kvlZV1xwyhL50vlZV1xxChL50voZV1xxShL50vpZV1xxihL6UvqZV1xxyhL6UvrZV1xyChL60vjZV1xyShL60vs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'))
	crdInfo = cPickle.loads(base64.b64decode(''))
	surfInfo = {'category': (0, None, {}), 'probeRadius': (0, None, {}), 'pointSize': (0, None, {}), 'name': [], 'density': (0, None, {}), 'colorMode': (0, None, {}), 'useLighting': (0, None, {}), 'transparencyBlendMode': (0, None, {}), 'molecule': [], 'smoothLines': (0, None, {}), 'lineWidth': (0, None, {}), 'allComponents': (0, None, {}), 'twoSidedLighting': (0, None, {}), 'oneTransparentLayer': (0, None, {}), 'drawMode': (0, None, {}), 'display': (0, None, {}), 'customColors': []}
	vrmlInfo = {'subid': (0, None, {}), 'display': (0, None, {}), 'id': (0, None, {}), 'vrmlString': [], 'name': (0, None, {})}
	colors = {'Ru': ((0.141176, 0.560784, 0.560784), 1, 'default'), 'Ni': ((0.313725, 0.815686, 0.313725), 1, 'default'), 'Re': ((0.14902, 0.490196, 0.670588), 1, 'default'), 'Rf': ((0.8, 0, 0.34902), 1, 'default'), 'Ra': ((0, 0.490196, 0), 1, 'default'), 'Rb': ((0.439216, 0.180392, 0.690196), 1, 'default'), 'Rn': ((0.258824, 0.509804, 0.588235), 1, 'default'), 'Rh': ((0.0392157, 0.490196, 0.54902), 1, 'default'), 'Be': ((0.760784, 1, 0), 1, 'default'), 'Ba': ((0, 0.788235, 0), 1, 'default'), 'Bh': ((0.878431, 0, 0.219608), 1, 'default'), 'Bi': ((0.619608, 0.309804, 0.709804), 1, 'default'), 'Bk': ((0.541176, 0.309804, 0.890196), 1, 'default'), 'Br': ((0.65098, 0.160784, 0.160784), 1, 'default'), '_openColor00': ((1, 1, 1), 1, 'default'), '_openColor01': ((1, 0, 1), 1, 'default'), '_openColor02': ((0, 1, 1), 1, 'default'), '_openColor03': ((1, 1, 0), 1, 'default'), '_openColor04': ((1, 0, 0), 1, 'default'), '_openColor05': ((0, 0, 1), 1, 'default'), '_openColor06': ((0.67, 1, 0), 1, 'default'), '_openColor07': ((0.67, 0, 1), 1, 'default'), '_openColor08': ((0.67, 1, 1), 1, 'default'),
'H': ((1, 1, 1), 1, 'default'), 'P': ((1, 0.501961, 0), 1, 'default'), 'Os': ((0.14902, 0.4, 0.588235), 1, 'default'), 'Ge': ((0.4, 0.560784, 0.560784), 1, 'default'), 'Gd': ((0.270588, 1, 0.780392), 1, 'default'), 'Ga': ((0.760784, 0.560784, 0.560784), 1, 'default'), 'Pr': ((0.85098, 1, 0.780392), 1, 'default'), '_openColor12': ((1, 1, 0.5), 1, 'default'), '_openColor11': ((1, 0.67, 1), 1, 'default'), '_openColor10': ((0, 0.67, 1), 1, 'default'), 'Pt': ((0.815686, 0.815686, 0.878431), 1, 'default'), 'Pu': ((0, 0.419608, 1), 1, 'default'), 'C': ((0.564706, 0.564706, 0.564706), 1, 'default'), 'Pb': ((0.341176, 0.34902, 0.380392), 1, 'default'), 'Pa': ((0, 0.631373, 1), 1, 'default'), 'Pd': ((0, 0.411765, 0.521569), 1, 'default'), 'Xe': ((0.258824, 0.619608, 0.690196), 1, 'default'), 'Po': ((0.670588, 0.360784, 0), 1, 'default'), 'Pm': ((0.639216, 1, 0.780392), 1, 'default'), 'Hs': ((0.901961, 0, 0.180392), 1, 'default'), 'Ho': ((0, 1, 0.611765), 1, 'default'), 'Hf': ((0.301961, 0.760784, 1), 1, 'default'), 'Hg': ((0.721569, 0.721569, 0.815686), 1, 'default'),
'He': ((0.85098, 1, 1), 1, 'default'), 'Md': ((0.701961, 0.0509804, 0.65098), 1, 'default'), 'Mg': ((0.541176, 1, 0), 1, 'default'), 'K': ((0.560784, 0.25098, 0.831373), 1, 'default'), 'Mn': ((0.611765, 0.478431, 0.780392), 1, 'default'), 'O': ((1, 0.0509804, 0.0509804), 1, 'default'), 'Mt': ((0.921569, 0, 0.14902), 1, 'default'), 'S': ((1, 1, 0.188235), 1, 'default'), 'W': ((0.129412, 0.580392, 0.839216), 1, 'default'), 'Zn': ((0.490196, 0.501961, 0.690196), 1, 'default'), 'Eu': ((0.380392, 1, 0.780392), 1, 'default'), 'Zr': ((0.580392, 0.878431, 0.878431), 1, 'default'), 'Er': ((0, 0.901961, 0.458824), 1, 'default'), '_openColor13': ((1, 0, 0.5), 1, 'default'), 'No': ((0.741176, 0.0509804, 0.529412), 1, 'default'), 'Na': ((0.670588, 0.360784, 0.94902), 1, 'default'), 'Nb': ((0.45098, 0.760784, 0.788235), 1, 'default'), 'Nd': ((0.780392, 1, 0.780392), 1, 'default'), 'Ne': ((0.701961, 0.890196, 0.960784), 1, 'default'), 'Np': ((0, 0.501961, 1), 1, 'default'), 'Fr': ((0.258824, 0, 0.4), 1, 'default'), '_openColor15': ((0.67, 0.67, 1), 1, 'default'), '_openColor14': ((0, 1, 0.5), 1, 'default'),
'Fe': ((0.878431, 0.4, 0.2), 1, 'default'), 'Fm': ((0.701961, 0.121569, 0.729412), 1, 'default'), 'B': ((1, 0.709804, 0.709804), 1, 'default'), 'F': ((0.564706, 0.878431, 0.313725), 1, 'default'), 'Sr': ((0, 1, 0), 1, 'default'), 'N': ((0.188235, 0.313725, 0.972549), 1, 'default'), 'Kr': ((0.360784, 0.721569, 0.819608), 1, 'default'), 'Si': ((0.941176, 0.784314, 0.627451), 1, 'default'), 'Sn': ((0.4, 0.501961, 0.501961), 1, 'default'), 'Sm': ((0.560784, 1, 0.780392), 1, 'default'), 'V': ((0.65098, 0.65098, 0.670588), 1, 'default'), 'Sc': ((0.901961, 0.901961, 0.901961), 1, 'default'), 'Sb': ((0.619608, 0.388235, 0.709804), 1, 'default'), 'Sg': ((0.85098, 0, 0.270588), 1, 'default'), 'Se': ((1, 0.631373, 0), 1, 'default'), 'Co': ((0.941176, 0.564706, 0.627451), 1, 'default'), 'Cm': ((0.470588, 0.360784, 0.890196), 1, 'default'), 'Cl': ((0.121569, 0.941176, 0.121569), 1, 'default'), 'Ca': ((0.239216, 1, 0), 1, 'default'), 'Cf': ((0.631373, 0.211765, 0.831373), 1, 'default'), 'Ce': ((1, 1, 0.780392), 1, 'default'), 'Cd': ((1, 0.85098, 0.560784), 1, 'default'),
'Tm': ((0, 0.831373, 0.321569), 1, 'default'), 'Cs': ((0.341176, 0.0901961, 0.560784), 1, 'default'), 'Cr': ((0.541176, 0.6, 0.780392), 1, 'default'), 'Cu': ((0.784314, 0.501961, 0.2), 1, 'default'), 'La': ((0.439216, 0.831373, 1), 1, 'default'), 'Li': ((0.8, 0.501961, 1), 1, 'default'), 'Tl': ((0.65098, 0.329412, 0.301961), 1, 'default'), 'Lu': ((0, 0.670588, 0.141176), 1, 'default'), 'Lr': ((0.780392, 0, 0.4), 1, 'default'), 'Th': ((0, 0.729412, 1), 1, 'default'), 'Ti': ((0.74902, 0.760784, 0.780392), 1, 'default'), 'Te': ((0.831373, 0.478431, 0), 1, 'default'), 'Tb': ((0.188235, 1, 0.780392), 1, 'default'), 'Tc': ((0.231373, 0.619608, 0.619608), 1, 'default'), 'Ta': ((0.301961, 0.65098, 1), 1, 'default'), 'Yb': ((0, 0.74902, 0.219608), 1, 'default'), 'Db': ((0.819608, 0, 0.309804), 1, 'default'), 'Dy': ((0.121569, 1, 0.780392), 1, 'default'), '_openColor09': ((1, 0.67, 0), 1, 'default'), 'At': ((0.458824, 0.309804, 0.270588), 1, 'default'), 'I': ((0.580392, 0, 0.580392), 1, 'default'), 'U': ((0, 0.560784, 1), 1, 'default'), 'Y': ((0.580392, 1, 1), 1, 'default'),
'Ac': ((0.439216, 0.670588, 0.980392), 1, 'default'), 'Ag': ((0.752941, 0.752941, 0.752941), 1, 'default'), 'Ir': ((0.0901961, 0.329412, 0.529412), 1, 'default'), 'Am': ((0.329412, 0.360784, 0.94902), 1, 'default'), 'Al': ((0.74902, 0.65098, 0.65098), 1, 'default'), 'As': ((0.741176, 0.501961, 0.890196), 1, 'default'), 'Ar': ((0.501961, 0.819608, 0.890196), 1, 'default'), 'Au': ((1, 0.819608, 0.137255), 1, 'default'), 'Es': ((0.701961, 0.121569, 0.831373), 1, 'default'), 'In': ((0.65098, 0.458824, 0.45098), 1, 'default'), 'Mo': ((0.329412, 0.709804, 0.709804), 1, 'default')}
	materials = {'default': ((0.85, 0.85, 0.85), 30)}
	pbInfo = {'category': ['distance monitor'], 'bondInfo': [{'color': (0, None, {}), 'atoms': [], 'label': (0, None, {}), 'halfbond': (0, None, {}), 'labelColor': (0, None, {}), 'drawMode': (0, None, {}), 'display': (0, None, {})}], 'lineType': (1, 2, {}), 'color': (1, 16, {}), 'showStubBonds': (1, False, {}), 'lineWidth': (1, 1, {}), 'stickScale': (1, 1, {}), 'id': [-2]}
	modelAssociations = {}
	colorInfo = {0: ('_openColor00', (1, 1, 1, 1)), 1: ('_openColor01', (1, 0, 1, 1)), 2: ('_openColor02', (0, 1, 1, 1)), 3: ('_openColor03', (1, 1, 0, 1)), 4: ('_openColor04', (1, 0, 0, 1)), 5: ('_openColor05', (0, 0, 1, 1)), 6: ('_openColor06', (0.67, 1, 0, 1)), 7: ('_openColor07', (0.67, 0, 1, 1)), 8: ('_openColor08', (0.67, 1, 1, 1)), 9: ('_openColor09', (1, 0.67, 0, 1)), 10: ('_openColor10', (0, 0.67, 1, 1)), 11: ('_openColor11', (1, 0.67, 1, 1)), 12: ('_openColor12', (1, 1, 0.5, 1)), 13: ('N', (0.188235, 0.313725, 0.972549, 1)), 14: ('O', (1, 0.0509804, 0.0509804, 1)), 15: ('H', (1, 1, 1, 1)), 16: ('yellow', (1, 1, 0, 1)), 17: ('white', (1, 1, 1, 1)), 18: ('green', (0, 1, 0, 1))}
	viewerInfo = {'cameraAttrs': {'center': (34.068, -3.8215, 17.6184), 'fieldOfView': 26.2751, 'nearFar': (26.7854, 8.45147), 'ortho': False, 'eyeSeparation': 50.8, 'focal': 17.648}, 'viewerAttrs': {'silhouetteColor': None, 'clipping': False, 'showSilhouette': False, 'viewSize': 8.05504, 'depthCueRange': (0.5, 1), 'silhouetteWidth': 1, 'depthCue': True, 'highlight': 0, 'scaleFactor': 0.453494}, 'viewerHL': 18, 'cameraMode': 'mono', 'detail': 1, 'viewerFog': None, 'viewerBG': 17}

	replyobj.status("Initializing session restore...", blankAfter=0)
	init(colorInfo)
	replyobj.status("Restoring colors...", blankAfter=0)
	restoreColors(colors, materials)
	replyobj.status("Restoring molecules...", blankAfter=0)
	restoreMolecules(molInfo, resInfo, atomInfo, bondInfo, crdInfo)
	replyobj.status("Restoring surfaces...", blankAfter=0)
	restoreSurfaces(surfInfo)
	replyobj.status("Restoring VRML models...", blankAfter=0)
	restoreVRML(vrmlInfo)
	replyobj.status("Restoring pseudobond groups...", blankAfter=0)
	restorePseudoBondGroups(pbInfo)
	replyobj.status("Restoring model associations...", blankAfter=0)
	restoreModelAssociations(modelAssociations)
	replyobj.status("Restoring camera...", blankAfter=0)
	restoreViewer(viewerInfo)

try:
	restoreCoreModels()
except:
	reportRestoreError("Error restoring core models")

	replyobj.status("Restoring extension info...", blankAfter=0)


def restoreLightController():
	import Lighting
	c = Lighting.get().setFromParams({'quality': 'normal', 'shininess': (30.0, (0.84999999999999998, 0.84999999999999998, 0.84999999999999998), 1.0), 'key': (True, (1.0, 1.0, 1.0), 0.65327227115631104, (1.0, 1.0, 1.0), 1.0, (-0.35740674433659325, 0.66040155174814552, 0.66040155174814552)), 'fill': (True, (1.0, 1.0, 1.0), 0.49998998641967773, (1.0, 1.0, 1.0), 0.0, (0.25056280708573153, 0.25056280708573153, 0.9351131265310294))})
try:
	restoreLightController()
except:
	reportRestoreError("Error restoring lighting parameters")


def restoreSession_RibbonStyleEditor():
	import SimpleSession
	import RibbonStyleEditor
	userScalings = []
	userXSections = []
	userResidueClasses = []
	residueData = [(13, 'Chimera default', 'rounded', 'unknown'), (14, 'Chimera default', 'rounded', 'unknown'), (15, 'Chimera default', 'rounded', 'unknown'), (16, 'Chimera default', 'rounded', 'unknown'), (17, 'Chimera default', 'rounded', 'unknown'), (18, 'Chimera default', 'rounded', 'unknown'), (19, 'Chimera default', 'rounded', 'unknown'), (20, 'Chimera default', 'rounded', 'unknown'), (21, 'Chimera default', 'rounded', 'unknown'), (22, 'Chimera default', 'rounded', 'unknown'), (23, 'Chimera default', 'rounded', 'unknown'), (24, 'Chimera default', 'rounded', 'unknown'), (25, 'Chimera default', 'rounded', 'unknown'), (26, 'Chimera default', 'rounded', 'unknown'), (27, 'Chimera default', 'rounded', 'unknown'), (28, 'Chimera default', 'rounded', 'unknown'), (29, 'Chimera default', 'rounded', 'unknown'), (30, 'Chimera default', 'rounded', 'unknown'), (31, 'Chimera default', 'rounded', 'unknown'), (32, 'Chimera default', 'rounded', 'unknown'), (33, 'Chimera default', 'rounded', 'unknown'), (34, 'Chimera default', 'rounded', 'unknown'), (35, 'Chimera default', 'rounded', 'unknown'),
(36, 'Chimera default', 'rounded', 'unknown'), (37, 'Chimera default', 'rounded', 'unknown'), (38, 'Chimera default', 'rounded', 'unknown')]
	flags = RibbonStyleEditor.NucleicDefault1
	SimpleSession.registerAfterModelsCB(RibbonStyleEditor.restoreState,
				(userScalings, userXSections,
				userResidueClasses, residueData, flags))
try:
	restoreSession_RibbonStyleEditor()
except:
	reportRestoreError("Error restoring RibbonStyleEditor state")
geomData = {'AxisManager': {}, 'PlaneManager': {}}

try:
	from StructMeasure.Geometry import geomManager
	geomManager._restoreSession(geomData)
except:
	reportRestoreError("Error restoring geometry objects in session")


def restoreMidasText():
	from Midas import midas_text
	midas_text.aliases = {}
	midas_text.userSurfCategories = {}

try:
	restoreMidasText()
except:
	reportRestoreError('Error restoring Midas text state')


def restoreMidasBase():
	import chimera
	from SimpleSession import modelMap, modelOffset
	def deformatPosition(pos):
		xfDict = {}
		for molId, xfData in pos[5].items():
			mid, subid = molId
			trData, rotData = xfData
			xf = chimera.Xform.translation(*trData)
			xf.rotate(*rotData)
			xfDict[(mid+modelOffset, subid)] = xf
		try:
			from chimera.misc import KludgeWeakWrappyDict
			clipDict = KludgeWeakWrappyDict("Model")
		except ImportError:
			from weakref import WeakKeyDictionary
			clipDict = WeakKeyDictionary()
		for clipID, clipInfo in pos[6].items():
			mid, subid, className = clipID
			models = [m for m in modelMap.get((mid, subid), [])
					if m.__class__.__name__ == className]
			if not models:
				continue
			useClip, ox, oy, oz, nx, ny, nz, useThick, thickness = clipInfo
			if useClip:
				origin = chimera.Point(ox, oy, oz)
				normal = chimera.Vector(nx, ny, nz)
				plane = chimera.Plane(origin, normal)
			else:
				plane = chimera.Plane()
			for m in models:
				clipDict[m] = (useClip, plane,
							useThick, thickness)
		return pos[:5] + (xfDict, clipDict) + pos[7:]
	formattedPositions = {}
	positions = {}
	for name, fpos in formattedPositions.items():
		positions[name] = deformatPosition(fpos)
	import Midas
	if modelOffset == 0:
		Midas.positions.clear()
	Midas.positions.update(positions)
	positionStack = []
	Midas._positionStack = map(deformatPosition, positionStack)

def delayedMidasBase():
	try:
		restoreMidasBase()
	except:
		reportRestoreError('Error restoring Midas base state')
import SimpleSession
SimpleSession.registerAfterModelsCB(delayedMidasBase)


try:
	import StructMeasure
	from StructMeasure.DistMonitor import restoreDistances
	registerAfterModelsCB(restoreDistances, 1)
except:
	reportRestoreError("Error restoring distances in session")


def restoreRemainder():
	from SimpleSession.versions.v45 import restoreWindowSize, \
	     restoreOpenStates, restoreSelections, restoreFontInfo, \
	     restoreOpenModelsAttrs, restoreModelClip

	curSelIds =  []
	savedSels = []
	openModelsAttrs = { 'cofrMethod': 4 }
	windowSize = (1270, 607)
	xformMap = {0: (((-0.154263, 0.13053, 0.97937), 91.756), (29.5206, -43.0239, 10.5173), True), 1: (((0.406034, 0.65291, 0.639409), 174.415), (48.5349, -52.7312, -7.54086), True), 2: (((0.928636, -0.0151888, -0.37068), 110.344), (16.9871, 31.3599, 8.75432), True), 3: (((0.951197, 0.304364, 0.0508613), 111.477), (30.4377, 25.3191, 22.4655), True), 4: (((0.964803, 0.214029, 0.152797), 101.464), (-8.97587, 54.595, -2.58613), True), 5: (((-0.780131, 0.620636, 0.0787837), 132.815), (16.8131, 16.5468, 33.5245), True), 6: (((0.761853, 0.632615, -0.139203), 99.8029), (-11.7371, 4.41412, 31.6873), True), 7: (((0.0405721, -0.519144, 0.853724), 148.46), (31.3551, 19.2596, 8.07347), True), 8: (((-0.408474, 0.81776, 0.405485), 141.273), (27.5526, -45.7194, 10.1068), True), 9: (((-0.569827, 0.507609, 0.646243), 145.241), (48.4351, 0.189513, 34.2531), True), 10: (((0.86766, 0.293766, 0.401083), 129.878), (1.80988, -2.34317, 17.6435), True), 11: (((0.23451, -0.676435, 0.698169), 157.601), (52.3269, 13.2883, 9.93458), True), 12: (((0.221561, 0.779229, -0.586271), 162.322), (46.1906, 0.253352, 35.1163), True)}
	fontInfo = {'face': ('Sans Serif', 'Normal', 16)}
	clipPlaneInfo = {}

	replyobj.status("Restoring window...", blankAfter=0)
	restoreWindowSize(windowSize)
	replyobj.status("Restoring open states...", blankAfter=0)
	restoreOpenStates(xformMap)
	replyobj.status("Restoring font info...", blankAfter=0)
	restoreFontInfo(fontInfo)
	replyobj.status("Restoring selections...", blankAfter=0)
	restoreSelections(curSelIds, savedSels)
	replyobj.status("Restoring openModel attributes...", blankAfter=0)
	restoreOpenModelsAttrs(openModelsAttrs)
	replyobj.status("Restoring model clipping...", blankAfter=0)
	restoreModelClip(clipPlaneInfo)

	replyobj.status("Restoring remaining extension info...", blankAfter=0)
try:
	restoreRemainder()
except:
	reportRestoreError("Error restoring post-model state")
from SimpleSession.versions.v45 import makeAfterModelsCBs
makeAfterModelsCBs()

from SimpleSession.versions.v45 import endRestore
replyobj.status('Finishing restore...', blankAfter=0)
endRestore()
replyobj.status('Restore finished.')

